{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static STATUS = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.STATUS.IDLE;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.PLAYING;\n        this.getRandomCell();\n        this.getRandomCell();\n    }\n    getRandomCell() {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [randomI, randomJ] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.state[randomI][randomJ] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkGameStatus() {\n        let canMove = false;\n        let hasEmptyCell = false;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.state[i][j] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.STATUS.WIN;\n                return;\n            }\n            if (this.state[i][j] === 0) hasEmptyCell = true;\n            if (j < 3 && this.state[i][j] === this.state[i][j + 1]) canMove = true;\n            if (i < 3 && this.state[i][j] === this.state[i + 1][j]) canMove = true;\n        }\n        if (!hasEmptyCell && !canMove) this.status = $a5fd07fa01589658$var$Game.STATUS.LOSE;\n    }\n    moveLeft() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            let canMove = false;\n            for(let i = 0; i < 4; i++){\n                const values = [];\n                for(let j = 0; j < 4; j++)if (this.state[i][j] !== 0) values.push(this.state[i][j]);\n                while(values.length < 4)values.push(0);\n                for(let t = 0; t < values.length - 1; t++)if (values[t] === values[t + 1] && values[t] !== 0) {\n                    values[t] *= 2;\n                    values[t + 1] = 0;\n                    this.score += values[t];\n                    canMove = true;\n                }\n                const mergedValues = values.filter((value)=>value !== 0);\n                while(mergedValues.length < 4)mergedValues.push(0);\n                for(let j = 0; j < 4; j++)if (this.state[i][j] !== mergedValues[j]) {\n                    this.state[i][j] = mergedValues[j];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCell();\n                this.checkGameStatus();\n            }\n        }\n    }\n    moveRight() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            let canMove = false;\n            for(let i = 0; i < 4; i++){\n                const values = [];\n                for(let j = 3; j >= 0; j--)if (this.state[i][j] !== 0) values.push(this.state[i][j]);\n                for(let t = 0; t < values.length; t++)if (values[t] === values[t + 1]) {\n                    values[t] *= 2;\n                    values[t + 1] = 0;\n                    this.score += values[t];\n                    canMove = true;\n                }\n                const updateRow = values.filter((value)=>value !== 0);\n                while(updateRow.length < 4)updateRow.push(0);\n                for(let j = 0; j < 4; j++)if (this.state[i][j] !== updateRow[3 - j]) {\n                    this.state[i][j] = updateRow[3 - j];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCell();\n                this.checkGameStatus();\n            }\n        }\n    }\n    moveUp() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            let canMove = false;\n            for(let j = 0; j < 4; j++){\n                const values = [];\n                for(let i = 0; i < 4; i++)if (this.state[i][j] !== 0) values.push(this.state[i][j]);\n                for(let t = 0; t < values.length; t++)if (values[t] === values[t + 1]) {\n                    values[t] *= 2;\n                    values[t + 1] = 0;\n                    this.score += values[t];\n                    canMove = true;\n                }\n                const updateColumn = values.filter((value)=>value !== 0);\n                while(updateColumn.length < 4)updateColumn.push(0);\n                for(let i = 0; i < 4; i++)if (this.state[i][j] !== updateColumn[i]) {\n                    this.state[i][j] = updateColumn[i];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCell();\n                this.checkGameStatus();\n            }\n        }\n    }\n    moveDown() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.PLAYING) {\n            let canMove = false;\n            for(let j = 0; j < 4; j++){\n                const values = [];\n                for(let i = 3; i >= 0; i--)if (this.state[i][j] !== 0) values.push(this.state[i][j]);\n                for(let t = 0; t < values.length; t++)if (values[t] === values[t + 1]) {\n                    values[t] *= 2;\n                    values[t + 1] = 0;\n                    this.score += values[t];\n                    canMove = true;\n                }\n                const updateColumn = values.filter((value)=>value !== 0);\n                while(updateColumn.length < 4)updateColumn.push(0);\n                for(let i = 0; i < 4; i++)if (this.state[i][j] !== updateColumn[3 - i]) {\n                    this.state[i][j] = updateColumn[3 - i];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCell();\n                this.checkGameStatus();\n            }\n        }\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.IDLE;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$button = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$setGameField();\n    $09e991522ca7e64e$var$setGameScore();\n});\ndocument.addEventListener(\"keyup\", (e)=>{\n    if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.STATUS.PLAYING) {\n        switch(e.key){\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n        }\n        $09e991522ca7e64e$var$setGameField();\n        $09e991522ca7e64e$var$setGameScore();\n        $09e991522ca7e64e$var$setMessages();\n    }\n});\nfunction $09e991522ca7e64e$var$setGameField() {\n    $09e991522ca7e64e$var$gameField.innerHTML = \"\";\n    const currState = $09e991522ca7e64e$var$game.getState();\n    for(let i = 0; i < 4; i++){\n        const tr = document.createElement(\"tr\");\n        for(let j = 0; j < 4; j++){\n            const td = document.createElement(\"td\");\n            const value = currState[i][j];\n            td.textContent = value === 0 ? \"\" : value;\n            td.classList.add(`field-cell`);\n            if (value !== 0) td.classList.add(`field-cell--${value}`);\n            tr.appendChild(td);\n        }\n        $09e991522ca7e64e$var$gameField.appendChild(tr);\n    }\n}\nfunction $09e991522ca7e64e$var$setGameScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$setMessages() {\n    if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.STATUS.WIN) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.STATUS.LOSE) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$setGameField();\n$09e991522ca7e64e$var$setGameScore();\n$09e991522ca7e64e$var$setMessages();\n\n\n//# sourceMappingURL=index.f603db20.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nconst button = document.querySelector('.start');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  } else if (button.classList.contains('restart')) {\n    game.restart();\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  setGameField();\n  setGameScore();\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (game.status === Game.STATUS.PLAYING) {\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n    }\n\n    setGameField();\n    setGameScore();\n    setMessages();\n  }\n});\n\nfunction setGameField() {\n  gameField.innerHTML = '';\n\n  const currState = game.getState();\n\n  for (let i = 0; i < 4; i++) {\n    const tr = document.createElement('tr');\n\n    for (let j = 0; j < 4; j++) {\n      const td = document.createElement('td');\n      const value = currState[i][j];\n\n      td.textContent = value === 0 ? '' : value;\n      td.classList.add(`field-cell`);\n\n      if (value !== 0) {\n        td.classList.add(`field-cell--${value}`);\n      }\n\n      tr.appendChild(td);\n    }\n\n    gameField.appendChild(tr);\n  }\n}\n\nfunction setGameScore() {\n  gameScore.textContent = game.getScore();\n}\n\nfunction setMessages() {\n  if (game.status === Game.STATUS.WIN) {\n    messageWin.classList.remove('hidden');\n  } else if (game.status === Game.STATUS.LOSE) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nsetGameField();\nsetGameScore();\nsetMessages();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static STATUS = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.STATUS.IDLE;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  start() {\n    this.status = Game.STATUS.PLAYING;\n    this.getRandomCell();\n    this.getRandomCell();\n  }\n\n  getRandomCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [randomI, randomJ] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomI][randomJ] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameStatus() {\n    let canMove = false;\n    let hasEmptyCell = false;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = Game.STATUS.WIN;\n\n          return;\n        }\n\n        if (this.state[i][j] === 0) {\n          hasEmptyCell = true;\n        }\n\n        if (j < 3 && this.state[i][j] === this.state[i][j + 1]) {\n          canMove = true;\n        }\n\n        if (i < 3 && this.state[i][j] === this.state[i + 1][j]) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (!hasEmptyCell && !canMove) {\n      this.status = Game.STATUS.LOSE;\n    }\n  }\n\n  moveLeft() {\n    if (this.status === Game.STATUS.PLAYING) {\n      let canMove = false;\n\n      for (let i = 0; i < 4; i++) {\n        const values = [];\n\n        for (let j = 0; j < 4; j++) {\n          if (this.state[i][j] !== 0) {\n            values.push(this.state[i][j]);\n          }\n        }\n\n        while (values.length < 4) {\n          values.push(0);\n        }\n\n        for (let t = 0; t < values.length - 1; t++) {\n          if (values[t] === values[t + 1] && values[t] !== 0) {\n            values[t] *= 2;\n            values[t + 1] = 0;\n            this.score += values[t];\n            canMove = true;\n          }\n        }\n\n        const mergedValues = values.filter((value) => value !== 0);\n\n        while (mergedValues.length < 4) {\n          mergedValues.push(0);\n        }\n\n        for (let j = 0; j < 4; j++) {\n          if (this.state[i][j] !== mergedValues[j]) {\n            this.state[i][j] = mergedValues[j];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCell();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === Game.STATUS.PLAYING) {\n      let canMove = false;\n\n      for (let i = 0; i < 4; i++) {\n        const values = [];\n\n        for (let j = 3; j >= 0; j--) {\n          if (this.state[i][j] !== 0) {\n            values.push(this.state[i][j]);\n          }\n        }\n\n        for (let t = 0; t < values.length; t++) {\n          if (values[t] === values[t + 1]) {\n            values[t] *= 2;\n            values[t + 1] = 0;\n            this.score += values[t];\n            canMove = true;\n          }\n        }\n\n        const updateRow = values.filter((value) => value !== 0);\n\n        while (updateRow.length < 4) {\n          updateRow.push(0);\n        }\n\n        for (let j = 0; j < 4; j++) {\n          if (this.state[i][j] !== updateRow[3 - j]) {\n            this.state[i][j] = updateRow[3 - j];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCell();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === Game.STATUS.PLAYING) {\n      let canMove = false;\n\n      for (let j = 0; j < 4; j++) {\n        const values = [];\n\n        for (let i = 0; i < 4; i++) {\n          if (this.state[i][j] !== 0) {\n            values.push(this.state[i][j]);\n          }\n        }\n\n        for (let t = 0; t < values.length; t++) {\n          if (values[t] === values[t + 1]) {\n            values[t] *= 2;\n            values[t + 1] = 0;\n            this.score += values[t];\n            canMove = true;\n          }\n        }\n\n        const updateColumn = values.filter((value) => value !== 0);\n\n        while (updateColumn.length < 4) {\n          updateColumn.push(0);\n        }\n\n        for (let i = 0; i < 4; i++) {\n          if (this.state[i][j] !== updateColumn[i]) {\n            this.state[i][j] = updateColumn[i];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCell();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === Game.STATUS.PLAYING) {\n      let canMove = false;\n\n      for (let j = 0; j < 4; j++) {\n        const values = [];\n\n        for (let i = 3; i >= 0; i--) {\n          if (this.state[i][j] !== 0) {\n            values.push(this.state[i][j]);\n          }\n        }\n\n        for (let t = 0; t < values.length; t++) {\n          if (values[t] === values[t + 1]) {\n            values[t] *= 2;\n            values[t + 1] = 0;\n            this.score += values[t];\n            canMove = true;\n          }\n        }\n\n        const updateColumn = values.filter((value) => value !== 0);\n\n        while (updateColumn.length < 4) {\n          updateColumn.push(0);\n        }\n\n        for (let i = 0; i < 4; i++) {\n          if (this.state[i][j] !== updateColumn[3 - i]) {\n            this.state[i][j] = updateColumn[3 - i];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCell();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  restart() {\n    this.status = Game.STATUS.IDLE;\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUS","IDLE","PLAYING","WIN","LOSE","constructor","initialState","status","state","map","row","score","start","getRandomCell","emptyCells","i","j","push","length","randomI","randomJ","Math","floor","random","checkGameStatus","canMove","hasEmptyCell","moveLeft","values","t","mergedValues","filter","value","moveRight","updateRow","moveUp","updateColumn","moveDown","restart","getScore","getState","getStatus","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$setGameField","innerHTML","currState","tr","createElement","td","textContent","classList","add","appendChild","$09e991522ca7e64e$var$setGameScore","$09e991522ca7e64e$var$setMessages","remove","addEventListener","contains","e","key"],"version":3,"file":"index.f603db20.js.map"}